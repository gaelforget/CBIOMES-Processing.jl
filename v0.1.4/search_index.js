var documenterSearchIndex = {"docs":
[{"location":"#CbiomesProcessing.jl-documentation-1","page":"CbiomesProcessing.jl documentation","title":"CbiomesProcessing.jl documentation","text":"","category":"section"},{"location":"#","page":"CbiomesProcessing.jl documentation","title":"CbiomesProcessing.jl documentation","text":"CbiomesProcessing.jl provides a simple, distributed workflow to e.g. post-process binary model output. Inter-operability with MeshArrays.jl and NCTiles.jl is an important prospect of this package.","category":"page"},{"location":"#Contents-1","page":"CbiomesProcessing.jl documentation","title":"Contents","text":"","category":"section"},{"location":"#","page":"CbiomesProcessing.jl documentation","title":"CbiomesProcessing.jl documentation","text":"","category":"page"},{"location":"#Main-Features-1","page":"CbiomesProcessing.jl documentation","title":"Main Features","text":"","category":"section"},{"location":"#","page":"CbiomesProcessing.jl documentation","title":"CbiomesProcessing.jl documentation","text":"Currently the reference implementation consists of","category":"page"},{"location":"#","page":"CbiomesProcessing.jl documentation","title":"CbiomesProcessing.jl documentation","text":"TaskDriver() (inside utilities.jl) is the driver function\nIt calls e.g. loop_task1.(i)\nCbiomesProcessing.loop_task1(indx::Int) (inside fileloops.jl) loads M from MTRX.jld\nIt calls loop_task1(indx,M)\nCbiomesProcessing.loop_task1(indx,M) (inside fileloops.jl) loops over files and variables\nIt calls MatrixInterp(in,MTRX,siz) and writes result to a FortranFile","category":"page"},{"location":"#","page":"CbiomesProcessing.jl documentation","title":"CbiomesProcessing.jl documentation","text":"API / Functions further documents the CbiomesProcessing module functions that are included in:","category":"page"},{"location":"#","page":"CbiomesProcessing.jl documentation","title":"CbiomesProcessing.jl documentation","text":"examples.jl includes simple examples without TaskDriver.\nfileloops.jl includes task loops such as CbiomesProcessing.loop_task1()](@ref). A real-life example is provided in the TaskDriver documentation reported below.\nutilities.jl provides low-level functions such as TaskDriver.\nsrc/CMAP2019/ contains a workflow that was used to process model output for ingestion in CMAP","category":"page"},{"location":"#Index-1","page":"CbiomesProcessing.jl documentation","title":"Index","text":"","category":"section"},{"location":"#","page":"CbiomesProcessing.jl documentation","title":"CbiomesProcessing.jl documentation","text":"","category":"page"},{"location":"#API-/-Functions-1","page":"CbiomesProcessing.jl documentation","title":"API / Functions","text":"","category":"section"},{"location":"#","page":"CbiomesProcessing.jl documentation","title":"CbiomesProcessing.jl documentation","text":"Modules = [CbiomesProcessing]\nOrder   = [:function, :type]","category":"page"},{"location":"#CbiomesProcessing.StartWorkers-Tuple{Int64}","page":"CbiomesProcessing.jl documentation","title":"CbiomesProcessing.StartWorkers","text":"StartWorkers(nwrkrs::Int)\n\nStart workers if needed.\n\n\n\n\n\n","category":"method"},{"location":"#CbiomesProcessing.TaskDriver-Tuple{Union{UnitRange{Int64}, Int64, Array{Int64,1}},Function}","page":"CbiomesProcessing.jl documentation","title":"CbiomesProcessing.TaskDriver","text":"TaskDriver(indx,fn)\n\nBroacast / distribute task (fn; e.g. loop_task1) over indices (indx; e.g. file indices)\n\nExamples:\n\nusing CbiomesProcessing, Distributed, SparseArrays\nTaskDriver(1,CbiomesProcessing.loop_task1)\n\nStartWorkers(4)\n@everywhere using CbiomesProcessing, SparseArrays\nTaskDriver(1:4,CbiomesProcessing.loop_task1)\n\nVisualize results:\n\nusing FortranFiles, Plots\nk=1\nrecl=720*360*4\nfil=\"diags_interp/ETAN/ETAN.0000000732.data\"\nf =  FortranFile(fil,\"r\",access=\"direct\",recl=recl,convert=\"big-endian\")\ntmp=read(f,rec=k,(Float32,(720,360))); close(f)\nheatmap(tmp)\n\n\n\n\n\n","category":"method"},{"location":"#CbiomesProcessing.cbioproc_example1-Tuple{}","page":"CbiomesProcessing.jl documentation","title":"CbiomesProcessing.cbioproc_example1","text":"cbioproc_example1()\n\nA 3D example without land mask or MeshArrays.\n\n\n\n\n\n","category":"method"},{"location":"#CbiomesProcessing.cbioproc_example2-Tuple{}","page":"CbiomesProcessing.jl documentation","title":"CbiomesProcessing.cbioproc_example2","text":"cbioproc_example2()\n\nA 2D example with MeshArrays + mask or loop.\n\n\n\n\n\n","category":"method"},{"location":"#CbiomesProcessing.loop_exampleA-Tuple{Any,Any,Any}","page":"CbiomesProcessing.jl documentation","title":"CbiomesProcessing.loop_exampleA","text":"loop_exampleA(indx,SPM,siz)\n\nApplies MatrixInterp in a loop over a subset of model output files (filList[indx])\n\n\n\n\n\n","category":"method"},{"location":"#CbiomesProcessing.loop_exampleB-Tuple{Any,Any,Any}","page":"CbiomesProcessing.jl documentation","title":"CbiomesProcessing.loop_exampleB","text":"loop_exampleB(indx,SPM,siz)\n\nApplies MatrixInterp in a loop over a subset of model output files (filList[indx])\n\n\n\n\n\n","category":"method"},{"location":"#CbiomesProcessing.loop_task1-Tuple{Any,Any}","page":"CbiomesProcessing.jl documentation","title":"CbiomesProcessing.loop_task1","text":"loop_task1(indx,M)\n\nLoop over a subset of model output files (filList[indx]), apply MatrixInterp (M) as a postprocessing step, and write the result to file (one subfolder for each variable)\n\n\n\n\n\n","category":"method"},{"location":"#CbiomesProcessing.loop_task1-Tuple{Int64}","page":"CbiomesProcessing.jl documentation","title":"CbiomesProcessing.loop_task1","text":"loop_task1(indx::Int)\n\nInterpolate all variables for one record\n\n\n\n\n\n","category":"method"},{"location":"#CbiomesProcessing.loop_task2-Tuple{Any}","page":"CbiomesProcessing.jl documentation","title":"CbiomesProcessing.loop_task2","text":"loop_task2(indx)\n\nLoop over a subset of model output files (filList[indx]), convert Rirr* to Satellite Chl as a postprocessing step, and write the result to file (one subfolder for each variable)\n\n\n\n\n\n","category":"method"},{"location":"#CbiomesProcessing.loop_task3-Tuple{Any}","page":"CbiomesProcessing.jl documentation","title":"CbiomesProcessing.loop_task3","text":"loop_task3(indx)\n\nLoop over a subset of model output files (filList[indx]), compute export as a postprocessing step, and write the result to file (one subfolder for each variable)\n\n\n\n\n\n","category":"method"},{"location":"#CbiomesProcessing.loop_task4-Tuple{Any}","page":"CbiomesProcessing.jl documentation","title":"CbiomesProcessing.loop_task4","text":"loop_task4(indx)\n\nLoop over model output files and time average them as a postprocessing step, and write the result to file (one subfolder for each variable)\n\n\n\n\n\n","category":"method"},{"location":"#","page":"CbiomesProcessing.jl documentation","title":"CbiomesProcessing.jl documentation","text":"/","category":"page"},{"location":"sepdev1/#Move-API-here?-1","page":"Move API here?","title":"Move API here?","text":"","category":"section"}]
}
